@page "/game/{Identifier:guid}/play"
@using QuizWars.Shared.Models.Response
@using QuizWars.Sdk
@using QuizWars.Client.Extensions
@using QuizWars.Shared.Models.Request

@inject NavigationManager Navigation
@inject QuizWarsClient QuizWars

<PageTitle>Play</PageTitle>

@if (Game is null)
{
    <MudText>Loading...</MudText>
}
else if (CurrentRound is null)
{
    <MudCard Class="rounded-lg">
        <MudCardMedia Image="@Game.Topic.GetImageUrl()"/>
        <MudCardContent>
            <MudStack AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h4">@Game.Topic.Title</MudText>
                <MudText>@Game.Topic.Description</MudText>
                <MudText Class="mb-4">@(Game.PlayerOne.Email) vs @(Game.PlayerTwo.Email)</MudText>
                <MudButton Class="mb-4" OnClick="@Start">Start!</MudButton>
                <MudText Typo="Typo.caption" Style="color: var(--mud-palette-text-secondary)">@Game.Identifier</MudText>
            </MudStack>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">@(Round + 1)/7: @(CurrentRound.Question.Text)</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudStack>
                <MudRadioGroup @bind-SelectedOption="@SelectedChoiceId">
                    <MudStack>
                        @foreach (var choice in @CurrentRound.Question.Choices)
                        {
                            <MudRadio Color="Color.Primary" Option="@choice.Id">@choice.Text</MudRadio>
                        }
                    </MudStack>
                </MudRadioGroup>
                <MudButton OnClick="@Submit" FullWidth>Submit</MudButton>
            </MudStack>
        </MudCardContent>
    </MudCard>
}

@code {
    private const int GameRounds = 7;
    
    [Parameter]
    public Guid Identifier { get; set; }

    private int Round { get; set; }

    private long SelectedChoiceId { get; set; }

    private GameResponse? Game { get; set; }

    private RoundResponse? CurrentRound { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Game = await QuizWars.Games.GetGame(Identifier);
    }

    private async Task Start() => await LoadRound(Round);

    private async Task Submit()
    {
        // TODO: Stop timer.
        
        var request = new CreateResponseRequest(SelectedChoiceId, 0); // TODO: // Timer value 
        await QuizWars.Responses.CreateResponse(Identifier, Round, request);
        
        // TODO: UI feedback for correct/wrong answer. 
        
        if (Round + 1 < 7)
        {
            await LoadRound(Round + 1);
        }
        else
        {
            Navigation.NavigateTo($"game/{Identifier}/over");
        }
    }

    private async Task LoadRound(int index)
    {
        CurrentRound = await QuizWars.Rounds.GetRound(Identifier, index);
        Round = CurrentRound.Index;
        SelectedChoiceId = 0;
        StateHasChanged();
        
        // TODO: Start timer.
    }
}