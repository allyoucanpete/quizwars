@page "/"
@using QuizWars.Shared.Models.Response
@using QuizWars.Sdk
@using QuizWars.Client.Components.Dialogs
@using QuizWars.Shared.Models.Request

@inject IDialogService DialogService
@inject QuizWarsClient QuizWars
<PageTitle>Home</PageTitle>

<MudGrid>
    @foreach (var topic in Topics)
    {
        <MudItem xs="6" sm="4" md="3">
            <MudCard Class="rounded-lg">
                <MudCardMedia Image="@ImageUrl(topic)"/>
                <MudCardHeader>@topic.Title</MudCardHeader>
                <MudCardContent>@topic.Description</MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async  () => await Play(topic))">
                        Play!
                    </MudButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Error"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default"/>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code
{
    private List<TopicResponse> Topics { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Topics = await QuizWars.Topics.GetTopics();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Unable to fetch categories: {e.Message}. \n{e.StackTrace}");
        }
    }

    private string ImageUrl(TopicResponse topic)
    {
        return $"https://fakeimg.pl/345x300/282828/eae0d0/?retina=1&text={topic.Title}";
    }

    private async Task Play(TopicResponse topic)
    {
        var opponent = await SelectUser();
        if (opponent is null)
        {
            return;
        }
        
        var request = new CreateGameRequest(topic.Id, opponent.UserId);
        await QuizWars.Games.CreateGame(request);
    }

    private async Task<UserInfo?> SelectUser()
    {
        var dialog = await DialogService.ShowAsync<SelectUserDialog>("Select Opponent");
        var result = await dialog.Result;
        return result.Data as UserInfo;
    }
}